// Generated by CoffeeScript 1.8.0
var HeroManager;

HeroManager = function() {
  this.heros = [];
};

HeroManager.prototype.invoker = function() {
  var extraSkills, invoSkills, invoker, skillInvoke, useSkill;
  extraSkills = [];
  extraSkills.push(new Skill({
    name: 'cold snap',
    dependencies: 'qqq'
  }));
  extraSkills.push(new Skill({
    name: 'sun strike',
    dependencies: 'eee'
  }));
  extraSkills.push(new Skill({
    name: 'ghost walk',
    dependencies: 'qqw'
  }));
  extraSkills.push(new Skill({
    name: 'ice wall',
    dependencies: 'qqe'
  }));
  extraSkills.push(new Skill({
    name: 'emp',
    dependencies: 'www'
  }));
  extraSkills.push(new Skill({
    name: 'tornado',
    dependencies: 'wwq'
  }));
  extraSkills.push(new Skill({
    name: 'alacrity',
    dependencies: 'wwe'
  }));
  extraSkills.push(new Skill({
    name: 'forge spirit',
    dependencies: 'eeq'
  }));
  extraSkills.push(new Skill({
    name: 'chaos meteor',
    dependencies: 'wee'
  }));
  extraSkills.push(new Skill({
    name: 'defeaning blast',
    dependencies: 'qwe'
  }));
  invoSkills = [];
  invoSkills.push(new Skill({
    name: 'quas',
    key: 'q',
    secondsCd: 0,
    canBeChallenge: false,
    customFun: function() {
      eventsLog.addKey('q');
    }
  }));
  invoSkills.push(new Skill({
    name: 'wex',
    key: 'w',
    secondsCd: 0,
    canBeChallenge: false,
    customFun: function() {
      eventsLog.addKey('w');
    }
  }));
  invoSkills.push(new Skill({
    name: 'exort',
    key: 'e',
    secondsCd: 0,
    canBeChallenge: false,
    customFun: function() {
      eventsLog.addKey('e');
    }
  }));
  useSkill = function(index) {
    return function() {
      var name;
      name = dispatcher.execute('getSkillName', index);
      dispatcher.execute('useSkill', name);
    };
  };
  invoSkills.push(new Skill({
    customFun: useSkill(3),
    key: 'd'
  }));
  invoSkills.push(new Skill({
    customFun: useSkill(4),
    key: 'f'
  }));
  skillInvoke = function(extraSkills) {
    return function() {
      var dep, i, lastSkill, nameSkill;
      lastSkill = dispatcher.execute('getLastSkill');
      i = 0;
      while (i < extraSkills.length) {
        dep = extraSkills[i].dependencies;
        nameSkill = extraSkills[i].name;
        if (lastSkill !== nameSkill && eventsLog.isSameState(dep)) {
          dispatcher.execute("changeSkill", i);
          break;
        }
        i++;
      }
    };
  };
  invoSkills.push(new Skill({
    name: 'invoke',
    key: 'r',
    secondsCd: 0,
    canBeChallenge: false,
    customFun: skillInvoke(extraSkills)
  }));
  invoker = new Hero({
    name: 'invoker',
    skills: invoSkills,
    extraSkills: extraSkills
  });
  return invoker;
};

HeroManager.prototype.create = function() {
  this.heros.push(this.invoker());
  return this;
};
